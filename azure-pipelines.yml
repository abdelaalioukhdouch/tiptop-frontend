trigger:
- main

variables:
  # Web app name
  webAppName: 'tiptipfront'

  # Environment name
  environmentName: 'tiptipfront'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.14.0'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        cp src/web.config dist/projectdsp/browser
      displayName: 'npm install, build, and prepare web.config'

    - script: npx cypress run
      displayName: 'Run functional tests'

    - script: |
        npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage
      displayName: 'Run Unit Tests'
      continueOnError: false
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/coverage/test-results.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish test results'

    # List all files in the working directory to verify the build and web.config placement
    - script: |
        echo "Listing all files in the working directory..."
        ls -R $(System.DefaultWorkingDirectory)/dist/projectdsp/browser
      displayName: 'List files in working directory'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: '**/test-results.xml'
        testRunTitle: 'Publish Test Results'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        condition: succeededOrFailed()

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/projectdsp/browser'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: tiptipfront'
            inputs:
              azureSubscription: 'Azure subscription 1'
              appName: '$(webAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
